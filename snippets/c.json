{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"for tradicional":{ 
		"prefix": "fori",
		"body": [
			"for(int i = 0 ; i < ${2:limit} ; i++){",
			"\t${0}",
			"}"
		],
		"description": "for tradicional",
	},

	"Salida en consola":{
		"prefix": "sout",
		"body": [
			"printf(\"${1:out}\");$0",
		],
		"description": "Salida en consola",
	},

	"Inicio de programa":{
		"prefix": "aaa",
		"body": [
			"#include <stdlib.h>",
			"#include <stdio.h>",
			"",
			"int main()",
			"{",
			"\t${0}",
			"\treturn 0;",
			"}"
		],
		"description": "inicio del codigo",
	},

	"ordenamiento":{
		"prefix": "ordenamiento",
		"body": [
			"int x = ${1: arrayLenght};",
			"int k = 0;",
			"while(k == 0)",
			"{",
			"    k = 1;",
			"    x--;",
			"    float aux;",
			"    for(int i = 0; i < x; i++){",
			"        if(${2:vecToOrder}[i] ${3} ${2:vecToOrder}[i+1])",
			"        {",
			"            k = 0;",
			"            aux = ${2:vecToOrder}[i];",
			"            ${2:vecToOrder}[i] = ${2:vecToOrder}[i+1];",
			"            ${2:vecToOrder}[i+1] = aux;",
			"        }",
			"    }",
			"}$0"
		],
		"description": "default switch",
	},

	"scanf":{
		"prefix": "scn",
		"body": [
			"scanf(\"%$1\",&${2:var});$0",
		],
		"description": "scanf",
	},

	
}